{"version":3,"sources":["components/layouts/Header.js","components/layouts/Footer.js","components/excercises/index.js","components/App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Header","props","classes","react_default","a","createElement","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Menu_default","Typography","variant","Button","onClick","handleClick","Footer","_React$useState","React","useState","_React$useState2","Object","slicedToArray","value","setValue","Paper","Tabs","onChange","event","newValue","indicatorColor","textColor","centered","Tab","label","paper","padding","margin","Exercises","Grid","container","item","xs","leftPaneMessage","App","state","count","_this","setState","Fragment","layouts_Header","this","excercises","layouts_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0a6fd66e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n\tAppBar,\r\n\tTypography,\r\n\tIconButton,\r\n\tButton,\r\n\tToolbar\r\n} from \"@material-ui/core\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n\troot: {\r\n\t\tflexGrow: 1\r\n\t},\r\n\tmenuButton: {\r\n\t\tmarginRight: theme.spacing(2)\r\n\t},\r\n\ttitle: {\r\n\t\tflexGrow: 1\r\n\t}\r\n}));\r\n\r\nconst Header = props => {\r\n\tconst classes = useStyles();\r\n\treturn (\r\n\t\t<div className={classes.root}>\r\n\t\t\t<AppBar position='static'>\r\n\t\t\t\t<Toolbar>\r\n\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\tedge='start'\r\n\t\t\t\t\t\tclassName={classes.menuButton}\r\n\t\t\t\t\t\tcolor='inherit'\r\n\t\t\t\t\t\taria-label='Menu'>\r\n\t\t\t\t\t\t<MenuIcon />\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t<Typography variant='h6' className={classes.title}>\r\n\t\t\t\t\t\tNews\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t\t<Button onClick={props.handleClick} color='inherit'>\r\n\t\t\t\t\t\tLogin\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Toolbar>\r\n\t\t\t</AppBar>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Paper, Tabs, Tab } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n\troot: {\r\n\t\tflexGrow: 1\r\n\t}\r\n});\r\n\r\nconst Footer = () => {\r\n\tconst classes = useStyles();\r\n\tconst [value, setValue] = React.useState(0);\r\n\r\n\tfunction handleChange(event, newValue) {\r\n\t\tsetValue(newValue);\r\n\t}\r\n\treturn (\r\n\t\t<Paper className={classes.root}>\r\n\t\t\t<Tabs\r\n\t\t\t\tvalue={value}\r\n\t\t\t\tonChange={handleChange}\r\n\t\t\t\tindicatorColor='primary'\r\n\t\t\t\ttextColor='primary'\r\n\t\t\t\tcentered>\r\n\t\t\t\t<Tab label='Item one' />\r\n\t\t\t\t<Tab label='Item two' />\r\n\t\t\t\t<Tab label='Item three' />\r\n\t\t\t</Tabs>\r\n\t\t</Paper>\r\n\t);\r\n};\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport { Grid, Paper } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n\troot: {\r\n\t\tflexGrow: 1\r\n\t},\r\n\tpaper: {\r\n\t\tpadding: 20,\r\n\t\tmargin: 10\r\n\t}\r\n}));\r\n\r\nconst Exercises = props => {\r\n\tconst classes = useStyles();\r\n\treturn (\r\n\t\t<Grid container className={classes.root}>\r\n\t\t\t<Grid item xs={6}>\r\n\t\t\t\t<Paper className={classes.paper}>{props.leftPaneMessage}</Paper>\r\n\t\t\t</Grid>\r\n\t\t\t<Grid item xs={6}>\r\n\t\t\t\t<Paper className={classes.paper}>Right Pane</Paper>\r\n\t\t\t</Grid>\r\n\t\t</Grid>\r\n\t);\r\n};\r\n\r\nexport default Exercises;\r\n","import React, { Component } from \"react\";\nimport { Header, Footer } from \"./layouts\";\nimport Exercises from \"./excercises\";\n\nclass App extends Component {\n\tstate = {\n\t\tcount: 1,\n\t\tleftPaneMessage: \"Left Pane\"\n\t};\n\n\thandleClick = () => {\n\t\tthis.setState({ count: this.state.count + 1 });\n\t\tthis.setState({\n\t\t\tleftPaneMessage: \"Login clicked \" + this.state.count + \" times...\"\n\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<Header handleClick={this.handleClick} />\n\t\t\t\t<Exercises leftPaneMessage={this.state.leftPaneMessage} />\n\t\t\t\t<Footer />\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}